
---
title: "Simple diffusion of adaptations"
format: html
---


## Section 1: Simple social learning dynamics

We begin with a minimal example to illustrate how the `socmod` package represents agent-based learning dynamics. The focal agent (Agent 1) interacts with neighbors exhibiting either adaptive or legacy behaviors. Behavior adoption is determined by comparing fitness, and agents update based on a success-bias strategy.

```{r}
library(socmod)
library(igraph)
library(dplyr)
library(tibble)
library(ggplot2)
```

```{r}
make_example_learning_abm <- function() {
  agent_1 <- Agent$new(1, behavior = "Legacy", fitness = 1, name = "1")
  agent_2 <- Agent$new(2, behavior = "Adaptive", fitness = 4, name = "2")
  agent_3 <- Agent$new(3, behavior = "Legacy", fitness = 1, name = "3")
  agent_4 <- Agent$new(4, behavior = "Legacy", fitness = 2, name = "4")

  agents <- list(agent_1, agent_2, agent_3, agent_4)
  socnet <- make_graph(~ 1-2, 1-3, 1-4, 3-2)
  AgentBasedModel$new(agents = agents, graph = socnet)
}
```

```{r}
abm <- make_example_learning_abm()

trial <- run_trial(
  abm,
  partner_selection = success_bias_select_teacher,
  interaction = success_bias_interact,
  iterate = iterate_learning_model,
  stop = 10
)

observations <- as_tibble(trial$get_observations())
outcomes <- as_tibble(trial$get_outcomes())

print(observations)
print(outcomes)
```

```{r}
ggplot(observations, aes(x = t, y = Behavior, group = agent, color = agent)) +
  geom_line() +
  geom_point(size = 2) +
  labs(title = "Observations: Behavior Over Time", x = "Time Step", y = "Behavior") +
  theme_minimal()
```

---

Now we explore how **learning strategy** and **adaptive fitness** affect behavior change by running trials over combinations of both.

```{r}
strategies <- list(
  success = list(
    partner_selection = success_bias_select_teacher,
    interaction = success_bias_interact
  ),
  frequency = list(
    partner_selection = frequency_bias_select_teacher,
    interaction = frequency_bias_interact
  )
)
```

```{r}
adaptive_fitnesses <- c(2, 4, 6, 8)
strategy_names <- names(strategies)

results <- purrr::map2(
  rep(adaptive_fitnesses, each = length(strategy_names)),
  rep(strategy_names, times = length(adaptive_fitnesses)),
  function(f_A, strategy) {
    run_trials(
      n = 25,
      model_generator = function() {
        abm <- make_example_learning_abm()
        abm$get_agent("2")$set_fitness(f_A)
        return(abm)
      },
      partner_selection = strategies[[strategy]]$partner_selection,
      interaction = strategies[[strategy]]$interaction,
      iterate = iterate_learning_model,
      metadata = list(adaptive_fitness = f_A, 
                      strategy = strategy),
      stop = 10
    )
  }
) |> purrr::flatten()
```

```{r}
summary_df <- summarise_by_metadata(results, fields = c("adaptive_fitness", "strategy"))
print(summary_df)

ggplot(summary_df, aes(x = adaptive_fitness, y = success_rate, color = strategy)) +
  geom_line() +
  labs(
    title = "Behavior Adoption by Fitness and Learning Strategy",
    x = "Adaptive Fitness (f_A)", y = "Proportion Adopting"
  ) +
  theme_minimal()
```
## Section 2: Diffusion in the Florentine marriage network

To explore how seed set and fitness affect the success of an adaptation, we use a historical social network — the Florentine marriage network among elite families in Renaissance Italy.

We compare how two different seed sets — `Medici + Pazzi` vs. `Medici + Strozzi` — influence the success of an adaptive behavior under varying fitness advantages.

```{r}
# Load required packages
library(socmod)
library(dplyr)
library(purrr)
library(igraph)
library(ggplot2)

# Load the Florentine marriage network
load_florentine_marriage_network <- function() {
  if (!requireNamespace("netrankr", quietly = TRUE)) {
    stop("Please install the 'netrankr' package to access the Florentine families network.")
  }

  data("florentine_m", package = "netrankr", envir = environment())
  graph <- igraph::delete_vertices(florentine_m, which(degree(florentine_m) == 0))
  return(graph)
}

# Define the agent-based model for given seed set and fitness
make_florentine_seed_model <- function(seed_families = c("Medici"),
                                       adaptive_fitness = 1.2,
                                       legacy_fitness = 1,
                                       graph = NULL) {
  if (is.null(graph)) {
    if (!requireNamespace("netrankr", quietly = TRUE)) {
      stop("Please install the 'netrankr' package to access the Florentine families network.")
    }
    data("florentine_m", package = "netrankr", envir = environment())
    graph <- igraph::delete_vertices(florentine_m, which(degree(florentine_m) == 0))
  }

  nodes <- igraph::V(graph)$name

  agents <- purrr::map(nodes, function(family) {
    behavior <- if (family %in% seed_families) "Adaptive" else "Legacy"
    fitness <- if (behavior == "Adaptive") adaptive_fitness else legacy_fitness
    Agent$new(id = family, name = family, behavior = behavior, fitness = fitness)
  })

  AgentBasedModel$new(agents = agents, graph = graph)
}

# Run trials for each seed set and adaptive fitness value
run_florentine_seed_model <- function(adaptive_fitnesses = c(1.0, 1.5),
                                      n_trials = 10,
                                      seed_sets = list(
                                        `Medici + Pazzi` = c("Medici", "Pazzi"),
                                        `Medici + Strozzi` = c("Medici", "Strozzi")
                                      ),
                                      legacy_fitness = 1) {

  trials <- purrr::map2(
    names(seed_sets), seed_sets,
    function(label, seeds) {
      purrr::map(adaptive_fitnesses, function(f_A) {
        run_trials(
          n_trials,
          model_generator = function() make_florentine_seed_model(
            seeds, adaptive_fitness = f_A
          ),
          label = label,
          metadata = list(seed_set = label, adaptive_fitness = f_A),
          stop = fixated
        )
      }) |> flatten()
    }
  ) |> flatten()

  summary_by_fitness <- summarise_by_metadata(
    trials, fields = c("adaptive_fitness", "seed_set")
  )

  return(summary_by_fitness)
}

# Plot results
plot_florentine_seed_analysis <- function(adaptive_fitnesses, summary_by_fitness) {
  ggplot(summary_by_fitness, aes(x = adaptive_fitness, y = success_rate,
                                 color = seed_set, linetype = seed_set)) +
    geom_line(linewidth = 1.2) +
    geom_point(size = 2) +
    labs(
      x = "Adaptive fitness",
      y = "Success rate",
      color = "Seed set",
      linetype = "Seed set"
    ) +
    scale_x_continuous(breaks = adaptive_fitnesses) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    theme_classic(base_size = 14)
}
```

```{r}
# Define adaptive fitnesses and run the simulation
adaptive_fitnesses <- c(1.0, 1.2, 1.4, 1.6, 1.8, 2.0)
summary_by_fitness <- run_florentine_seed_model(adaptive_fitnesses)

# Generate and display the plot
plot_florentine_seed_analysis(adaptive_fitnesses, summary_by_fitness)
```

## Section 3: Seeding strategies in a small-world village network

Inspired by a real-world public health intervention in rural Honduras, we explore how different **seeding strategies** affect the success of behavior change.

We compare:
- **Random seeding**: randomly chosen individuals in the network
- **Friendship nomination seeding**: seed the friends of randomly chosen individuals

This example illustrates the **friendship paradox** — the idea that your friends are more central than you — and how it can be leveraged to design more effective interventions.

```{r}
library(socmod)
library(igraph)
library(purrr)
library(dplyr)
library(tidyr)
library(ggplot2)
```

```{r}
# Create the small-world network
make_village_network <- function() {
  make_small_world(N = 100, k = 10, p = 0.25)
}
```

```{r}
# Define the model with seeded individuals
make_seeded_model <- function(seed_ids, adaptive_fitness = 1.5, legacy_fitness = 1) {
  net <- make_village_network()
  agents <- purrr::map(igraph::V(net), function(v) {
    id <- as.character(v)
    behavior <- if (id %in% seed_ids) "Adaptive" else "Legacy"
    fitness <- if (behavior == "Adaptive") adaptive_fitness else legacy_fitness
    Agent$new(id = id, name = id, behavior = behavior, fitness = fitness)
  })
  AgentBasedModel$new(agents = agents, graph = net)
}
```

```{r}
# Random and friendship-nomination seeders
random_seeder <- function(network, n = 5) {
  sample(igraph::V(network)$name, n)
}

friendship_seeder <- function(network, n = 5) {
  seeds <- sample(igraph::V(network), n)
  neighbors <- unlist(igraph::neighbors(network, seeds))
  unique(igraph::V(network)[neighbors]$name)
}
```

```{r}
# Compare strategies across adaptive fitnesses
adaptive_fitnesses <- c(1.2, 1.4, 1.6, 1.8)
strategies <- list(random = random_seeder, friendship = friendship_seeder)

results <- purrr::map2(
  rep(adaptive_fitnesses, each = length(strategies)),
  rep(names(strategies), times = length(adaptive_fitnesses)),
  function(f_A, strategy) {
    seeder <- strategies[[strategy]]
    run_trials(
      n = 20,
      model_generator = function() {
        net <- make_village_network()
        seed_ids <- seeder(net)
        make_seeded_model(seed_ids, adaptive_fitness = f_A)
      },
      partner_selection = success_bias_select_teacher,
      interaction = success_bias_interact,
      iterate = iterate_learning_model,
      metadata = list(strategy = strategy, 
                      adaptive_fitness = f_A),
      stop = fixated
    ) 
  }
) 

# |> purrr::flatten()
```

```{r}
# Summarize and plot
summary_df <- summarise_by_metadata(results, fields = c("f_A", "strategy"))

ggplot(summary_df, aes(x = f_A, y = success_rate, color = strategy)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Success Rate by Seeding Strategy",
    x = "Adaptive Fitness (f_A)",
    y = "Intervention Success Rate"
  ) +
  theme_classic(base_size = 14)
```

This example highlights how **network structure and seed selection** dramatically affect the outcome of behavior change. In networks with clustered structure and variable centrality, friendship-nomination can give interventions a measurable edge.
